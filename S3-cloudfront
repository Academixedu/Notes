# Tutorial: Hosting a React App on AWS S3 and CloudFront

This tutorial will guide you through hosting a React app on AWS S3, first without CloudFront, and then adding CloudFront for improved performance and security.

## Part 1: Hosting on S3 without CloudFront

### 1. Build your React app
```bash
npm run build
```

### 2. Create an S3 bucket
```bash
aws s3 mb s3://your-bucket-name
```
Replace `your-bucket-name` with your desired bucket name.

### 3. Disable default public access block
```bash
aws s3api put-public-access-block --bucket your-bucket-name --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
```

### 4. Configure the bucket for static website hosting
```bash
aws s3 website s3://your-bucket-name --index-document index.html --error-document index.html
```

### 5. Set bucket policy for public read access
Create a file named `bucket-policy.json` with the following content:
```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
    ]
}
```
Then apply the policy:
```bash
aws s3api put-bucket-policy --bucket your-bucket-name --policy file://bucket-policy.json
```

### 6. Upload your React build to S3
```bash
aws s3 sync build/ s3://your-bucket-name
```

### 7. Access your website
Your website should now be accessible at `http://your-bucket-name.s3-website-<region>.amazonaws.com`

To get your bucket's region:
```bash
aws s3api get-bucket-location --bucket your-bucket-name
```

## Part 2: Adding CloudFront

### 1. Create a CloudFront distribution
```bash
aws cloudfront create-distribution --origin-domain-name your-bucket-name.s3.amazonaws.com --default-root-object index.html
```
Note the `DomainName` in the response. It will look like `d1234abcd.cloudfront.net`.

### 2. Wait for the distribution to deploy
Check the status with:
```bash
aws cloudfront get-distribution --id <distribution-id>
```
Replace `<distribution-id>` with the `Id` from the previous response.

### 3. Update bucket policy for CloudFront access
Create a file named `cloudfront-policy.json`:
```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "CloudFrontAccess",
            "Effect": "Allow",
            "Principal": {
                "Service": "cloudfront.amazonaws.com"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket-name/*",
            "Condition": {
                "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::<your-account-id>:distribution/<distribution-id>"
                }
            }
        }
    ]
}
```
Replace `<your-account-id>` with your AWS account ID and `<distribution-id>` with your CloudFront distribution ID.

Apply the new policy:
```bash
aws s3api put-bucket-policy --bucket your-bucket-name --policy file://cloudfront-policy.json
```

### 4. Access your website via CloudFront
Once the CloudFront distribution status is 'Deployed', you can access your website via the CloudFront URL (e.g., `d1234abcd.cloudfront.net`).

## Next Steps
- Set up a custom domain
- Enable HTTPS using AWS Certificate Manager
- Configure a CI/CD pipeline for automated deployments

Remember to replace `your-bucket-name`, `<region>`, `<distribution-id>`, and `<your-account-id>` with your actual values throughout this tutorial.
